{"pages":[],"posts":[{"title":"spring boot 框架","text":"拦截器 需要实现HandlerInterceptor接口的preHandler方法 记得添加@Service @Service public class LoginInterceptor implements HandlerInterceptor { @Autowired private UserMapper userMapper; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { Cookie[] cookies = request.getCookies(); if (cookies != null){ for (Cookie cookie : cookies) { if (cookie.getName().equals(&quot;token&quot;)){ String token = cookie.getValue(); UserExample userExample = new UserExample(); userExample.createCriteria() .andTokenEqualTo(token); List&lt;User&gt; users = userMapper.selectByExample(userExample); if(users.size() != 0){ User user = users.get(0); request.getSession().setAttribute(&quot;user&quot;, user); break; } } } } return true; } 实现WebMvcConfigurer接口中的addInterceptors 记得添加@Configuration @Configuration public class WebConfig implements WebMvcConfigurer { @Autowired private LoginInterceptor loginInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(loginInterceptor).addPathPatterns(&quot;/**&quot;); } }","link":"/2019/08/10/spring-boot/"}],"tags":[{"name":"spring","slug":"spring","link":"/tags/spring/"}],"categories":[]}