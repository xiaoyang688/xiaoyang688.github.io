{"pages":[],"posts":[{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2019/08/08/hello-world/"},{"title":"spring boot 框架","text":"拦截器 需要实现HandlerInterceptor接口的preHandler方法 记得添加@Service 123456789101112131415161718192021222324252627@Servicepublic class LoginInterceptor implements HandlerInterceptor { @Autowired private UserMapper userMapper; @Override public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { Cookie[] cookies = request.getCookies(); if (cookies != null){ for (Cookie cookie : cookies) { if (cookie.getName().equals(\"token\")){ String token = cookie.getValue(); UserExample userExample = new UserExample(); userExample.createCriteria() .andTokenEqualTo(token); List&lt;User&gt; users = userMapper.selectByExample(userExample); if(users.size() != 0){ User user = users.get(0); request.getSession().setAttribute(\"user\", user); break; } } } } return true; } 实现WebMvcConfigurer接口中的addInterceptors 记得添加@Configuration 1234567891011@Configurationpublic class WebConfig implements WebMvcConfigurer { @Autowired private LoginInterceptor loginInterceptor; @Override public void addInterceptors(InterceptorRegistry registry) { registry.addInterceptor(loginInterceptor).addPathPatterns(\"/**\"); }}","link":"/2019/08/10/spring-boot/"}],"tags":[{"name":"spring","slug":"spring","link":"/tags/spring/"}],"categories":[]}